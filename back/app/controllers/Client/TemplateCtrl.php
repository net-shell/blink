<?php

namespace Client;

class TemplateCtrl extends \BaseController
{

	public function getInfo($id)
	{
		$tpl = \Models\Client\Template::find($id);
		$confFile = file_get_contents($tpl->storage() . 'config.json');
		$confInfo = json_decode($confFile);
		$result = [
			'info' => $confInfo->info,
			'object' => $tpl
		];
		return \Response::Json((object)$result);
	}
	
	// todo: make it POST, receive initial key
	public function getInit($id)
	{
		$tpl = \Models\Client\Template::find($id);
		$confFileName = $tpl->storage() . 'config.json';
		
		// todo: find subscription by key, refresh key, return new key
		// $tpl = \Models\Client\Template::find($id);
		$key = 'autogeneratedkey';
		
		$result = [ 'k' => $key ];
		
		if(file_exists($confFileName))
		{
			// Add settings
			$conf = json_decode(file_get_contents($confFileName));
			$result['s'] = $conf->settings;
		
			// Add presets
			if(0 < count((array)$conf->presets))
				$result['p'] = $conf->presets;
		}
		return \Response::Json((object)$result);
	}
	
	public function getGenerate($id, $target)
	{
		return "One must not seek to get<br>For one is that which only matters<br>What one posts<br>-- Forgotten haiku";
	}

	public function postGenerate($id, $target)
	{
		$tpl = \Models\Client\Template::find($id);
		// todo: check for key
		// todo: update template's db last access ip
	
		ob_start();
		
		$config = json_decode(\Input::get('config'));
		
		// Generate new key
		$key = $config->APIKey;
		// mock
		$key.= (string)substr($key, -1) === '0';
		
		if(!is_object($config))
			die('Error A631');
		
		$targetPlatform = \Models\Client\Target::where('slug', $target);
		if(!$targetPlatform) die('Error A632');
		
		$clientVars = [
			'assetsUrl' => 'wp-content/themes/tmpl8ngin/'
		];
		
		// Generate base template
		
		$fileList= \File::allFiles($tpl->storage());
		$files = [];
		$fComple = [
			'css'	=> 'style',
			'js'	=> 'main'
		];
		$fSkip = ['config.json'];

		// Flatten settings
		$settings = [];
		$settingsArray = [];
		foreach($config->Settings->Template as $group=>$grpset)
		{
			$settings[$group] = (object)[];
			foreach($grpset as $name=>$val)
			{
				$key = '$'. $group .'->'. $name;
				$key = str_replace(' ', '', $key);
				$settings[$group]->{$name} = $val->v;
				$settingsArray[$key] = $val->v;
			}
		}
		
		// Process files
		// 1	Compiling
		$fCompileFormats = array_keys($fComple);
		foreach ($fileList as $file)
		{
			$n = $file->getFilename();
			if(in_array($n, $fSkip)) continue;
			$e = $file->getExtension();
			$c = $file->getContents();
			
			if(in_array($e, $fCompileFormats))
			{
				$fkeys = array_keys($settingsArray);
				$pattern = '/\{\{ (.+) \}\}/';
				
				$c = preg_replace_callback($pattern, function($m) use ($settingsArray, $fkeys) {
					if(in_array($m[1], $fkeys))
						return $settingsArray[$m[1]];
					else
					{
						$code = 'return ' . $m[1] . ';';
						try { return eval($code); }
						catch(Exception $e) { return ''; }
					}
				}, $c);
				$c = "/* $n */\n$c";
				$c = $this->sanitizeOutput($c);
				$files[$fComple[$e] . '.' . $e] = $c;
			}
		}
		
		// 2	Taking care of view locals
		$clientVars['assets'] = '';
		foreach($fComple as $ext=>$name)
		{
			$n = $name . '.' . $ext;
			if(!in_array($n, array_keys($files))) continue;
			switch($ext)
			{
				case 'css':
					$clientVars['assets'] .= '<link rel="stylesheet" title="Theme" href="' . $clientVars['assetsUrl'] . $n . '" />';
					break;
				case 'js':
					$clientVars['assets'] .= '<script src="' . $clientVars['assetsUrl'] . $n . '"></script>';
					break;
			}
		}
		
		// 3	Render views
		\View::addNamespace('theme', $tpl->storage());
		foreach($fileList as $file)
		{
			$n = $file->getFilename();
			if(in_array($n, $fSkip)) continue;
			if($n != 'index.blade.php') continue;
			$e = $file->getExtension();
			$c = $file->getContents();
			
			if(!in_array($e, $fComple))
			{
				$data = array_merge($settings, $clientVars);
				$name = str_replace($tpl->storage(), '', $file->getRelativePath()) . $n;
				
				if(substr($name, -10) == '.blade.php')
					$name = str_replace('.blade.php', '.php', $name);
				
				$viewFile = str_replace(".$e", '', $name);
				$viewFile = str_replace('/', '.', $viewFile);
				
				$c = \View::make('theme::' . $viewFile, $data);
				
				$c = $c->render();
				$c = $this->sanitizeOutput($c);
				$files[$name] = $c;
			}
		}
		
		$error = ob_get_contents();
		ob_end_clean();
		
		$result = [
			'Dir' => 'tmpl8ngin',
			'APIKey' => $key,
			'Files' => $files
		];
		
		if(strlen($error) > 0)
			$result['error'] = $error;
		
		return \Response::Json((object)$result);
	}

	private function sanitizeOutput($buffer)
	{
		$search = ['/\>[^\S ]+/s', '/[^\S ]+\</s', '/(\s)+/s'];

		$replace = ['>', '<', '\\1'];
		return preg_replace($search, $replace, $buffer);
	}
}